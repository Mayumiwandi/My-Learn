# -*- coding: utf-8 -*-
"""Image-Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_DANj_Ma2BOx_xWmIwdBBuuHVy2UCMbs

Proyek Akhir Image Classification Model Deployment pada pembelajar Pengembangan Machine Learning. <br>
 Nama : Ahmad Wandi <br>
 Tanggal : 14 Januari 2024
"""

!pip install kaggle

"""## Import Semua Module"""

from google.colab import files
import matplotlib.pyplot as plt
import PIL
import zipfile, os, pathlib
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow import keras
from tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import Callback, EarlyStopping

"""Apload File Api Key Kaggle"""

files.upload()

"""Membuat dan memasukan Api key Kaggle kedalam Folder"""

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json

"""Melakukan Install Dataset dari Api dataset"""

!kaggle datasets download -d misrakahmed/vegetable-image-dataset

"""## Exploratory Dataset"""

zip_ref = zipfile.ZipFile('/content/vegetable-image-dataset.zip', 'r')
zip_ref.extractall('/content/sets')
zip_ref.close()

folder_path = '/content/sets/Vegetable Images/train'

folder_names = os.listdir(folder_path)
for folder_name in folder_names:
    print('folder',folder_name)
total_file = len(os.listdir(folder_path))
print ('Total Folder : ',total_file)

file_count = 0
for root, dirs, files in os.walk(folder_path):
    for file in files:
        file_count += 1


print('Total Dataset Adalah: ',file_count)

def count_files(rootdir):
    for dirpath, _, filenames in os.walk(rootdir):
        file_count = sum(1 for file in filenames if os.path.isfile(os.path.join(dirpath, file)))
        if file_count > 0:
            print(f"Terdapat {file_count} Dataset dari Folder {os.path.basename(dirpath)}")

count_files(folder_path)

"""## Menampilkan Gambar dari 15 Folder yang ada"""

data_dir = pathlib.Path(folder_path).with_suffix('')

Potato = list(data_dir.glob('Potato/*.jpg'))
PIL.Image.open(Potato[1])

Capsicum = list(data_dir.glob('Capsicum/*.jpg'))
PIL.Image.open(Capsicum[1])

Pumpkin = list(data_dir.glob('Pumpkin/*.jpg'))
PIL.Image.open(Pumpkin[100])

Broccoli = list(data_dir.glob('Broccoli/*.jpg'))
PIL.Image.open(Broccoli[1])

Bitter_Gourd = list(data_dir.glob('Bitter_Gourd/*.jpg'))
PIL.Image.open(Bitter_Gourd[10])

Cabbage = list(data_dir.glob('Cabbage/*.jpg'))
PIL.Image.open(Cabbage[10])

Radish = list(data_dir.glob('Radish/*.jpg'))
PIL.Image.open(Radish[10])

Bottle_Gourd = list(data_dir.glob('Bottle_Gourd/*.jpg'))
PIL.Image.open(Bottle_Gourd[10])

Brinjal = list(data_dir.glob('Brinjal/*.jpg'))
PIL.Image.open(Brinjal[10])

Papaya = list(data_dir.glob('Papaya/*.jpg'))
PIL.Image.open(Papaya[200])

Bean = list(data_dir.glob('Bean/*.jpg'))
PIL.Image.open(Bean[10])

Cucumber = list(data_dir.glob('Cucumber/*.jpg'))
PIL.Image.open(Cucumber[10])

Carrot = list(data_dir.glob('Carrot/*.jpg'))
PIL.Image.open(Carrot[10])

Tomato = list(data_dir.glob('Tomato/*.jpg'))
PIL.Image.open(Tomato[120])

Cauliflower = list(data_dir.glob('Cauliflower/*.jpg'))
PIL.Image.open(Cauliflower[10])

"""## Image Data Generator"""

val_size = 0.2

train_datagen = ImageDataGenerator(
    rotation_range = 20,
    brightness_range = [0.5,1.5],
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    fill_mode = "nearest",
    vertical_flip=True,
    rescale = 1./255,
    validation_split = val_size
)

validation_datagen = ImageDataGenerator(
    rotation_range = 20,
    brightness_range = [0.5,1.5],
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    vertical_flip=True,
    fill_mode = "nearest",
    rescale = 1./255,
    validation_split = val_size
)

train_generator = train_datagen.flow_from_directory(
    folder_path,
    target_size = (150,150),
    color_mode = "rgb",
    class_mode = "categorical",
    batch_size = 128,
    shuffle = True,
    subset = "training"
)

validation_generator = validation_datagen.flow_from_directory(
    folder_path,
    target_size = (150,150),
    color_mode = "rgb",
    class_mode = "categorical",
    batch_size = 128,
    shuffle = False,
    subset = "validation"
)

"""## Membuat model"""

model = Sequential([
       tf.keras.layers.Conv2D(32,(3,3), activation='relu', input_shape=(150,150,3)),
       tf.keras.layers.MaxPooling2D(pool_size=(2,2),padding='same'),
       tf.keras.layers.Dropout(0.2),
       tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='same'),
       tf.keras.layers.MaxPooling2D(pool_size=(2,2),padding='same'),
       tf.keras.layers.Flatten(),
       tf.keras.layers.Dense(512, activation='relu'),
       tf.keras.layers.BatchNormalization(),
       tf.keras.layers.Dropout(0.5),
       tf.keras.layers.Dense(128, activation='relu'),
       tf.keras.layers.Dropout(0.25),
       tf.keras.layers.Dense(15, activation='softmax')



])

model.summary()

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""Menetapkan Callback"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') >= 0.95 and logs.get('val_accuracy') >= 0.95 ):
      print("\n Accuracy dan Validation Accuracy sudah mencapai 95 % atau lebih")
      self.model.stop_training = True
callbacks = myCallback()

"""##Melatih Model"""

history = model.fit(train_generator,
                 epochs=50,
                 verbose=1,
                 validation_data= validation_generator,
                 callbacks=callbacks,
                 workers=4
                )

"""## Membuat plot terhadap akurasi dan loss model"""

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

"""## Menyimpan model ke dalam format TF-Lite."""

export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('Vegetables.tflite')
tflite_model_file.write_bytes(tflite_model)